// Enhanced Migration Settings JavaScript - CSV/Excel Processing Focus
// Zoho and Odoo features temporarily disabled - Coming in future updates

frappe.ui.form.on('Migration Settings', {
    refresh: function(frm) {
        // === CSV/EXCEL PROCESSING BUTTONS (ACTIVE) ===

        frm.add_custom_button(__('Test CSV Directory'), function() {
            test_connection(frm, 'csv');
        }, __('Test Connections'));

        frm.add_custom_button(__("Intelligent CSV Processing"), function() {
            frappe.confirm(
                'Are you sure you want to start intelligent CSV processing? This will analyze and automatically process CSV files with smart field mapping.',
                function() {
                    frappe.show_alert({
                        message: __('Starting intelligent CSV processing...'),
                        indicator: 'blue'
                    });

                    frappe.call({
                        method: 'trigger_intelligent_processing',
                        doc: frm.doc,
                        callback: function(r) {
                            if (r.message && r.message.status === 'success') {
                                frappe.show_alert({
                                    message: __(r.message.message),
                                    indicator: 'green'
                                });

                                frappe.msgprint({
                                    title: __('Processing Started'),
                                    message: `
**Files Found:** ${r.message.files_found || 0}
**Job ID:** ${r.message.job_id || 'N/A'}

The system will intelligently analyze CSV headers and create appropriate DocTypes.
`,
                                    indicator: 'blue'
                                });

                                if (r.message.job_id) {
                                    setTimeout(() => check_job_status(r.message.job_id), 5000);
                                }
                            } else {
                                frappe.msgprint({
                                    title: __('Processing Failed'),
                                    message: r.message ? r.message.message : 'Failed to start intelligent processing',
                                    indicator: 'red'
                                });
                            }
                        },
                        error: function(r) {
                            frappe.msgprint({
                                title: __('Processing Error'),
                                message: 'Failed to trigger intelligent processing. Please try again.',
                                indicator: 'red'
                            });
                        }
                    });
                }
            );
        }, __("CSV Processing"));

        // === MONITORING BUTTONS (ACTIVE) ===

        frm.add_custom_button(__('Migration Status'), function() {
            show_migration_status(frm);
        }, __('Monitoring'));

        frm.add_custom_button(__('Pending Requests'), function() {
            show_pending_requests(frm);
        }, __('Monitoring'));

        frm.add_custom_button(__('Buffer Statistics'), function() {
            show_buffer_statistics(frm);
        }, __('Monitoring'));

        // === ZOHO/ODOO BUTTONS (DISABLED - COMING SOON) ===

        // Zoho Connection Test - Disabled
        frm.add_custom_button(__('Test Zoho Connection (Coming Soon)'), function() {
            frappe.msgprint({
                title: __('Feature Coming Soon'),
                message: `
<div style="text-align: center; padding: 20px;">
    <p style="font-size: 16px; margin-bottom: 15px;">üöÄ <strong>Zoho Integration</strong></p>
    <p>This feature is under development and will be available in a future update.</p>
    <p style="margin-top: 15px; color: #888;">Currently focusing on CSV/Excel processing capabilities.</p>
</div>
`,
                indicator: 'blue'
            });
        }, __('Future Updates'));

        // Odoo Connection Test - Disabled
        frm.add_custom_button(__('Test Odoo Connection (Coming Soon)'), function() {
            frappe.msgprint({
                title: __('Feature Coming Soon'),
                message: `
<div style="text-align: center; padding: 20px;">
    <p style="font-size: 16px; margin-bottom: 15px;">üöÄ <strong>Odoo Integration</strong></p>
    <p>This feature is under development and will be available in a future update.</p>
    <p style="margin-top: 15px; color: #888;">Currently focusing on CSV/Excel processing capabilities.</p>
</div>
`,
                indicator: 'blue'
            });
        }, __('Future Updates'));

        // Add enhanced migration dashboard
        add_enhanced_migration_dashboard(frm);

        // Initialize real-time updates
        setup_realtime_updates(frm);

        // Hide/Show Zoho and Odoo sections based on enable checkboxes
        toggle_zoho_odoo_sections(frm);
    },

    enable_zoho_sync: function(frm) {
        // Don't make fields required, just show a message
        if (frm.doc.enable_zoho_sync) {
            frappe.msgprint({
                title: __('Zoho Sync - Coming Soon'),
                message: 'Zoho synchronization is currently under development. Please uncheck this option for now.',
                indicator: 'blue'
            });
            // Auto-disable it
            frm.set_value('enable_zoho_sync', 0);
        }
        toggle_zoho_odoo_sections(frm);
    },

    enable_odoo_sync: function(frm) {
        // Don't make fields required, just show a message
        if (frm.doc.enable_odoo_sync) {
            frappe.msgprint({
                title: __('Odoo Sync - Coming Soon'),
                message: 'Odoo synchronization is currently under development. Please uncheck this option for now.',
                indicator: 'blue'
            });
            // Auto-disable it
            frm.set_value('enable_odoo_sync', 0);
        }
        toggle_zoho_odoo_sections(frm);
    },

    enable_csv_processing: function(frm) {
        frm.toggle_reqd(['csv_watch_directory'], frm.doc.enable_csv_processing);
    }
});

// Helper function to hide Zoho and Odoo sections
function toggle_zoho_odoo_sections(frm) {
    // Hide Zoho and Odoo sections when not enabled
    frm.toggle_display('zoho_section', false); // Always hide for now
    frm.toggle_display('odoo_section', false); // Always hide for now
}

function test_connection(frm, source) {
    frappe.show_alert({
        message: `Testing ${source} connection...`,
        indicator: 'blue'
    });

    frappe.call({
        method: 'data_migration_tool.data_migration.api.test_connection',
        args: { source: source },
        callback: function(r) {
            if (r.message && r.message.status === 'success') {
                frappe.show_alert({
                    message: `${source.toUpperCase()} connection successful`,
                    indicator: 'green'
                });

                if (r.message.details) {
                    frappe.msgprint({
                        title: __('Connection Details'),
                        message: `
**Status:** Connected

**Details:**
\`\`\`
${JSON.stringify(r.message.details, null, 2)}
\`\`\`

*Check Migration Status for updates.*
`,
                        indicator: 'green'
                    });
                }
            } else {
                frappe.msgprint({
                    title: __('Connection Failed'),
                    message: r.message ? r.message.message : 'Unknown error occurred',
                    indicator: 'red'
                });
            }
        },
        error: function(r) {
            frappe.msgprint({
                title: __('Connection Error'),
                message: 'Failed to test connection. Please check your settings.',
                indicator: 'red'
            });
        }
    });
}

function check_job_status(job_id) {
    frappe.call({
        method: 'data_migration_tool.data_migration.api.get_job_status',
        args: { job_id: job_id },
        callback: function(r) {
            if (r.message) {
                frappe.show_alert({
                    message: `Job Status: ${r.message.status}`,
                    indicator: r.message.status === 'completed' ? 'green' : 'blue'
                });
            }
        }
    });
}

function show_migration_status(frm) {
    frappe.call({
        method: 'data_migration_tool.data_migration.api.get_migration_status',
        callback: function(r) {
            if (r.message && r.message.status === 'success') {
                const data = r.message;
                let html = `
                    <div class="migration-status-report">
                        <h5>Migration Status Overview</h5>
                        
                        <div class="row">
                            <div class="col-sm-6">
                                <h6>Settings Status</h6>
                                <ul>
                                    <li>CSV Processing: ${data.settings.csv_processing_enabled ? '‚úÖ Enabled' : '‚ùå Disabled'}</li>
                                    <li>Zoho Sync: ${data.settings.zoho_sync_enabled ? '‚úÖ Enabled' : '‚ùå Disabled'}</li>
                                    <li>Odoo Sync: ${data.settings.odoo_sync_enabled ? '‚úÖ Enabled' : '‚ùå Disabled'}</li>
                                    <li>Last Sync: ${data.settings.last_sync_time || 'Never'}</li>
                                </ul>
                            </div>
                            <div class="col-sm-6">
                                <h6>Buffer Statistics</h6>
                                <ul>
                `;
                
                if (data.buffer_stats && data.buffer_stats.length > 0) {
                    const stats = {};
                    data.buffer_stats.forEach(stat => {
                        if (!stats[stat.processing_status]) stats[stat.processing_status] = 0;
                        stats[stat.processing_status] += stat.count;
                    });
                    
                    Object.keys(stats).forEach(status => {
                        const icon = status === 'Processed' ? '‚úÖ' : 
                                   status === 'Failed' ? '‚ùå' : 
                                   status === 'Pending' ? '‚è≥' : '‚ö†Ô∏è';
                        html += `<li>${icon} ${status}: ${stats[status]}</li>`;
                    });
                } else {
                    html += '<li>No buffer records found</li>';
                }
                
                html += `
                                </ul>
                            </div>
                        </div>
                        
                        <h6>Recent Requests</h6>
                        <table class="table table-sm">
                            <thead><tr><th>File</th><th>Status</th><th>DocType</th><th>Date</th></tr></thead>
                            <tbody>
                `;
                
                if (data.recent_requests && data.recent_requests.length > 0) {
                    data.recent_requests.forEach(req => {
                        const statusIcon = req.status === 'Completed' ? '‚úÖ' : 
                                         req.status === 'Failed' ? '‚ùå' : 
                                         req.status === 'Pending' ? '‚è≥' : '‚ö†Ô∏è';
                        html += `
                            <tr>
                                <td>${req.source_file}</td>
                                <td>${statusIcon} ${req.status}</td>
                                <td>${req.final_doctype || '-'}</td>
                                <td>${moment(req.created_at).format('DD/MM HH:mm')}</td>
                            </tr>
                        `;
                    });
                } else {
                    html += '<tr><td colspan="4">No recent requests</td></tr>';
                }
                
                html += `
                            </tbody>
                        </table>
                    </div>
                `;
                
                frappe.msgprint({
                    title: __('Migration Status'),
                    message: html,
                    wide: true
                });
            } else {
                frappe.msgprint('Failed to fetch migration status');
            }
        }
    });
}

function show_pending_requests(frm) {
    frappe.call({
        method: 'data_migration_tool.data_migration.api.get_pending_doctype_requests',
        callback: function(r) {
            if (r.message && r.message.status === 'success') {
                if (r.message.requests.length === 0) {
                    frappe.msgprint('No pending DocType creation requests found');
                    return;
                }
                
                // Use the dialog from migration_tool
                if (migration_tool && migration_tool.dialog) {
                    migration_tool.dialog.show_pending_requests_list(r.message.requests);
                } else {
                    frappe.msgprint('Dialog handler not available. Please refresh the page.');
                }
            } else {
                frappe.msgprint('Failed to fetch pending requests');
            }
        }
    });
}

function show_buffer_statistics(frm) {
    frappe.call({
        method: 'data_migration_tool.data_migration.api.get_buffer_statistics',  // Use whitelisted method
        callback: function(r) {
            if (r.message && r.message.status === 'success') {
                const data = r.message.data;
                let html = `
                    <div class="buffer-statistics">
                        <h5>Migration Buffer Statistics</h5>
                        <p><strong>Total Records:</strong> ${data.total_records}</p>
                        
                        <h6>By Status</h6>
                        <ul>
                `;
                
                Object.keys(data.by_status || {}).forEach(status => {
                    const icon = status === 'Processed' ? '‚úÖ' : 
                               status === 'Failed' ? '‚ùå' : 
                               status === 'Pending' ? '‚è≥' : '‚ö†Ô∏è';
                    html += `<li>${icon} ${status}: ${data.by_status[status]}</li>`;
                });
                
                html += `
                        </ul>
                        
                        <h6>By DocType</h6>
                        <table class="table table-sm">
                            <thead><tr><th>DocType</th><th>Pending</th><th>Processed</th><th>Failed</th></tr></thead>
                            <tbody>
                `;
                
                Object.keys(data.by_doctype || {}).forEach(doctype => {
                    const stats = data.by_doctype[doctype];
                    html += `
                        <tr>
                            <td>${doctype}</td>
                            <td>${stats.Pending || 0}</td>
                            <td>${stats.Processed || 0}</td>
                            <td>${stats.Failed || 0}</td>
                        </tr>
                    `;
                });
                
                html += `
                            </tbody>
                        </table>
                    </div>
                `;
                
                frappe.msgprint({
                    title: __('Buffer Statistics'),
                    message: html,
                    wide: true
                });
            } else {
                frappe.msgprint('Failed to fetch buffer statistics');
            }
        }
    });
}

function check_job_status(job_name) {
    frappe.call({
        method: 'data_migration_tool.data_migration.api.get_job_status',  // Use our whitelisted method
        args: { job_name: job_name },
        callback: function(r) {
            if (r.message && r.message.status === 'success') {
                const job_status = r.message.job_status;
                if (job_status === 'finished') {
                    frappe.show_alert({
                        message: 'Sync job completed successfully',
                        indicator: 'green'
                    });
                } else if (job_status === 'failed') {
                    frappe.show_alert({
                        message: 'Sync job failed',
                        indicator: 'red'
                    });
                } else if (job_status === 'started') {
                    frappe.show_alert({
                        message: 'Sync job still running...',
                        indicator: 'blue'
                    });
                    // Check again in 5 seconds
                    setTimeout(() => {
                        check_job_status(job_name);
                    }, 5000);
                }
            }
        }
    });
}
function add_enhanced_migration_dashboard(frm) {
    // Enhanced dashboard with real-time updates
    const last_sync_formatted = frm.doc.last_sync_time ? 
        moment(frm.doc.last_sync_time).format('DD/MM/YYYY HH:mm:ss') : 'Never';
    
    const active_sources = [];
    if (frm.doc.enable_zoho_sync) active_sources.push('Zoho');
    if (frm.doc.enable_odoo_sync) active_sources.push('Odoo');
    if (frm.doc.enable_csv_processing) active_sources.push('CSV');
    
    // let dashboard_html = `
    //     <div class="migration-dashboard">
    //         <div class="row">
    //             <div class="col-sm-4">
    //                 <div class="card">
    //                     <div class="card-body">
    //                         <h6><i class="fa fa-clock-o"></i> Last Sync</h6>
    //                         <p>${last_sync_formatted}</p>
    //                     </div>
    //                 </div>
    //             </div>
    //             <div class="col-sm-4">
    //                 <div class="card">
    //                     <div class="card-body">
    //                         <h6><i class="fa fa-cogs"></i> Active Sources</h6>
    //                         <p>${active_sources.length > 0 ? active_sources.join(', ') : 'None configured'}</p>
    //                     </div>
    //                 </div>
    //             </div>
    //             <div class="col-sm-4">
    //                 <div class="card">
    //                     <div class="card-body">
    //                         <h6><i class="fa fa-refresh"></i> Sync Frequency</h6>
    //                         <p>${frm.doc.sync_frequency || 'Not set'}</p>
    //                     </div>
    //                 </div>
    //             </div>
    //         </div>
    //     </div>
    // `;
    
    $(frm.fields_dict['dashboard_html'].wrapper).html(dashboard_html);
}

function setup_realtime_updates(frm) {
    // Listen for migration events and update the dashboard
    frappe.realtime.on('migration_status_update', (data) => {
        frappe.show_alert({
            message: `Migration update: ${data.message}`,
            indicator: data.indicator || 'blue'
        });
        
        // Refresh the form if needed
        if (data.refresh_form) {
            frm.reload_doc();
        }
    });
    
    frappe.realtime.on('doctype_processing_completed', (data) => {
        frappe.show_alert({
            message: `Processing completed for ${data.filename}`,
            indicator: 'green'
        });
    });
}


function handleCSVFileUploadWithAutoDetection(file) {
    // Show progress
    show_progress_dialog("Analyzing CSV and processing...");
    
    frappe.call({
        method: "data_migration_tool.data_migration.api.process_csv_intelligent",
        args: {
            file_path: file.file_path,
            confidence_threshold: get_confidence_threshold() // Get from settings UI
        },
        callback: function(response) {
            hide_progress_dialog();
            
            if (response.message.status === 'success') {
                const result = response.message.data;
                const workflow = response.message.workflow;
                
                if (workflow === 'automated') {
                    // Automated workflow completed
                    frappe.show_alert({
                        message: `Successfully processed ${result.csv_analysis.total_rows} records into DocType: ${result.target_doctype}`,
                        indicator: 'green'
                    });
                    
                    // Show detailed results
                    show_import_results_dialog(result);
                    
                    // Redirect to the DocType list view
                    frappe.set_route('List', result.target_doctype);
                    
                } else if (workflow === 'manual') {
                    // Manual approval workflow
                    frappe.show_alert({
                        message: `DocType creation request submitted. Request ID: ${result.request_id}`,
                        indicator: 'blue'
                    });
                    
                    // Show manual request dialog
                    show_manual_request_dialog(result);
                    
                    // Redirect to DocType Creation Request list
                    frappe.set_route('List', 'DocType Creation Request', {status: 'Pending'});
                }
                
            } else {
                // Show error
                frappe.msgprint({
                    title: 'Processing Failed',
                    message: response.message.message,
                    indicator: 'red'
                });
            }
        },
        error: function(err) {
            hide_progress_dialog();
            frappe.msgprint({
                title: 'System Error',
                message: 'An unexpected error occurred during processing.',
                indicator: 'red'
            });
        }
    });
}

function get_confidence_threshold() {
    // Get threshold from Migration Settings or use default
    return parseFloat(cur_frm?.doc?.doctype_match_threshold || 80) / 100;
}

function show_import_results_dialog(result) {
    const d = new frappe.ui.Dialog({
        title: 'Import Results',
        fields: [
            {
                fieldtype: 'HTML',
                options: `
                    <div class="import-results">
                        <h4>${result.action_taken === 'matched_existing' ? 'üîÑ Updated Existing DocType' : 'üÜï Created New DocType'}</h4>
                        <p><strong>DocType:</strong> ${result.target_doctype}</p>
                        <p><strong>Confidence:</strong> ${(result.detection_details.confidence * 100).toFixed(1)}%</p>
                        
                        <h5>üìä Processing Results:</h5>
                        <ul>
                            <li>‚úÖ Success: ${result.import_results.processing_results.success || 0}</li>
                            <li>üîÑ Updated: ${result.import_results.processing_results.updated || 0}</li>
                            <li>‚è≠Ô∏è Skipped: ${result.import_results.processing_results.skipped || 0}</li>
                            <li>‚ùå Failed: ${result.import_results.processing_results.failed || 0}</li>
                        </ul>
                        
                        ${result.recommendations && result.recommendations.length > 0 ? 
                            `<h5>üí° Recommendations:</h5><ul>${result.recommendations.map(r => `<li>${r}</li>`).join('')}</ul>` 
                            : ''
                        }
                    </div>
                `
            }
        ],
        primary_action_label: 'View Records',
        primary_action: () => {
            d.hide();
            frappe.set_route('List', result.target_doctype);
        }
    });
    d.show();
}

function show_manual_request_dialog(result) {
    const d = new frappe.ui.Dialog({
        title: 'Manual Approval Required',
        fields: [
            {
                fieldtype: 'HTML',
                options: `
                    <div class="manual-request-info">
                        <h4>üìù DocType Creation Request Submitted</h4>
                        <p><strong>Request ID:</strong> ${result.request_id}</p>
                        <p><strong>Suggested DocType:</strong> ${result.suggested_doctype}</p>
                        <p><strong>File:</strong> ${result.csv_analysis.file_name}</p>
                        
                        <h5>üìã CSV Analysis:</h5>
                        <ul>
                            <li><strong>Rows:</strong> ${result.csv_analysis.total_rows}</li>
                            <li><strong>Columns:</strong> ${result.csv_analysis.total_columns}</li>
                            <li><strong>Headers:</strong> ${result.csv_analysis.headers.join(', ')}</li>
                        </ul>
                        
                        <p class="text-muted">
                            <i class="fa fa-info-circle"></i> 
                            Your CSV file requires manual approval. The system administrator will review and approve the DocType creation.
                        </p>
                    </div>
                `
            }
        ],
        primary_action_label: 'View Requests',
        primary_action: () => {
            d.hide();
            frappe.set_route('List', 'DocType Creation Request', {status: 'Pending'});
        }
    });
    d.show();
}









// // Enhanced Migration Settings JavaScript - Phase 1
// frappe.ui.form.on('Migration Settings', {
//     refresh: function(frm) {
//         // Add enhanced custom buttons with better error handling
//         frm.add_custom_button(__('Test Zoho Connection'), function() {
//             test_connection(frm, 'zoho');
//         }, __('Test Connections'));

//         frm.add_custom_button(__('Test Odoo Connection'), function() {
//             test_connection(frm, 'odoo');
//         }, __('Test Connections'));

//         frm.add_custom_button(__('Test CSV Directory'), function() {
//             test_connection(frm, 'csv');
//         }, __('Test Connections'));

//         frm.add_custom_button(__('Trigger Zoho Sync'), function() {
//             trigger_sync(frm, 'zoho');
//         }, __('Manual Sync'));

//         frm.add_custom_button(__('Trigger Odoo Sync'), function() {
//             trigger_sync(frm, 'odoo');
//         }, __('Manual Sync'));

//        // Replace the existing "Process CSV Files" button with this enhanced version
// frm.add_custom_button(__("Intelligent CSV Processing"), function() {
//     frappe.confirm(
//         'Are you sure you want to start intelligent CSV processing? This will analyze and automatically process CSV files with smart field mapping.',
//         function() {
//             frappe.show_alert({
//                 message: __('Starting intelligent CSV processing...'),
//                 indicator: 'blue'
//             });
            
//             frappe.call({
//                 method: 'trigger_intelligent_processing',
//                 doc: frm.doc,
//                 callback: function(r) {
//                     if (r.message && r.message.status === 'success') {
//                         frappe.show_alert({
//                             message: __(r.message.message),
//                             indicator: 'green'
//                         });
                        
//                         // Show processing details
//                         frappe.msgprint({
//                             title: __('Processing Started'),
//                             message: `
//                                 <p><strong>Files Found:</strong> ${r.message.files_found}</p>
//                                 <p><strong>Job ID:</strong> ${r.message.job_id}</p>
//                                 <p>The system will intelligently analyze CSV headers and create appropriate DocTypes.</p>
//                                 <p><em>Check Migration Status for updates.</em></p>
//                             `,
//                             indicator: 'blue'
//                         });
                        
//                         // Auto-refresh status after 5 seconds
//                         if (r.message.job_id) {
//                             setTimeout(() => check_job_status(r.message.job_id), 5000);
//                         }
//                     } else {
//                         frappe.msgprint({
//                             title: __('Processing Failed'),
//                             message: r.message ? r.message.message : 'Failed to start intelligent processing',
//                             indicator: 'red'
//                         });
//                     }
//                 },
//                 error: function(r) {
//                     frappe.msgprint({
//                         title: __('Processing Error'),
//                         message: 'Failed to trigger intelligent processing. Please try again.',
//                         indicator: 'red'
//                     });
//                 }
//             });
//         }
//     );
// }, __("Manual Sync"));

//         frm.add_custom_button(__('Full Sync'), function() {
//             trigger_sync(frm, 'all');
//         }, __('Manual Sync'));

//         // NEW: Add monitoring buttons
//         frm.add_custom_button(__('Migration Status'), function() {
//             show_migration_status(frm);
//         }, __('Monitoring'));

//         frm.add_custom_button(__('Pending Requests'), function() {
//             show_pending_requests(frm);
//         }, __('Monitoring'));

//         frm.add_custom_button(__('Buffer Statistics'), function() {
//             show_buffer_statistics(frm);
//         }, __('Monitoring'));

//         // Add enhanced migration dashboard
//         add_enhanced_migration_dashboard(frm);

//         // Initialize real-time updates
//         setup_realtime_updates(frm);
//     },

//     enable_zoho_sync: function(frm) {
//         frm.toggle_reqd(['zoho_client_id', 'zoho_client_secret', 'zoho_refresh_token'], frm.doc.enable_zoho_sync);
//     },

//     enable_odoo_sync: function(frm) {
//         frm.toggle_reqd(['odoo_url', 'odoo_database', 'odoo_username', 'odoo_password'], frm.doc.enable_odoo_sync);
//     },

//     enable_csv_processing: function(frm) {
//         frm.toggle_reqd(['csv_watch_directory'], frm.doc.enable_csv_processing);
//     }
// });

// function test_connection(frm, source) {
//     frappe.show_alert({
//         message: `Testing ${source} connection...`,
//         indicator: 'blue'
//     });

//     frappe.call({
//         method: 'data_migration_tool.data_migration.api.test_connection',
//         args: { source: source },
//         callback: function(r) {
//             if (r.message && r.message.status === 'success') {
//                 frappe.show_alert({
//                     message: `${source.toUpperCase()} connection successful`,
//                     indicator: 'green'
//                 });
                
//                 if (r.message.details) {
//                     frappe.msgprint({
//                         title: __('Connection Details'),
//                         message: `<pre>${JSON.stringify(r.message.details, null, 2)}</pre>`,
//                         indicator: 'green'
//                     });
//                 }
//             } else {
//                 frappe.msgprint({
//                     title: __('Connection Failed'),
//                     message: r.message ? r.message.message : 'Unknown error occurred',
//                     indicator: 'red'
//                 });
//             }
//         },
//         error: function(r) {
//             frappe.msgprint({
//                 title: __('Connection Error'),
//                 message: 'Failed to test connection. Please check your settings.',
//                 indicator: 'red'
//             });
//         }
//     });
// }

// function trigger_sync(frm, source) {
//     frappe.confirm(
//         __(`Are you sure you want to trigger ${source} sync manually? This may take some time.`),
//         function() {
//             frappe.show_alert({
//                 message: `Starting ${source} sync...`,
//                 indicator: 'blue'
//             });

//             frappe.call({
//                 method: 'data_migration_tool.data_migration.api.trigger_manual_sync',
//                 args: { source: source },
//                 callback: function(r) {
//                     if (r.message && r.message.status === 'success') {
//                         frappe.show_alert({
//                             message: r.message.message,
//                             indicator: 'green'
//                         });
                        
//                         if (r.message.job_name) {
//                             setTimeout(() => {
//                                 check_job_status(r.message.job_name);
//                             }, 2000);
//                         }
//                     } else {
//                         frappe.msgprint({
//                             title: __('Sync Failed'),
//                             message: r.message ? r.message.message : 'Failed to start sync',
//                             indicator: 'red'
//                         });
//                     }
//                 },
//                 error: function(r) {
//                     frappe.msgprint({
//                         title: __('Sync Error'),
//                         message: 'Failed to trigger sync. Please try again.',
//                         indicator: 'red'
//                     });
//                 }
//             });
//         }
//     );
// }

// function show_migration_status(frm) {
//     frappe.call({
//         method: 'data_migration_tool.data_migration.api.get_migration_status',
//         callback: function(r) {
//             if (r.message && r.message.status === 'success') {
//                 const data = r.message;
//                 let html = `
//                     <div class="migration-status-report">
//                         <h5>Migration Status Overview</h5>
                        
//                         <div class="row">
//                             <div class="col-sm-6">
//                                 <h6>Settings Status</h6>
//                                 <ul>
//                                     <li>CSV Processing: ${data.settings.csv_processing_enabled ? '‚úÖ Enabled' : '‚ùå Disabled'}</li>
//                                     <li>Zoho Sync: ${data.settings.zoho_sync_enabled ? '‚úÖ Enabled' : '‚ùå Disabled'}</li>
//                                     <li>Odoo Sync: ${data.settings.odoo_sync_enabled ? '‚úÖ Enabled' : '‚ùå Disabled'}</li>
//                                     <li>Last Sync: ${data.settings.last_sync_time || 'Never'}</li>
//                                 </ul>
//                             </div>
//                             <div class="col-sm-6">
//                                 <h6>Buffer Statistics</h6>
//                                 <ul>
//                 `;
                
//                 if (data.buffer_stats && data.buffer_stats.length > 0) {
//                     const stats = {};
//                     data.buffer_stats.forEach(stat => {
//                         if (!stats[stat.processing_status]) stats[stat.processing_status] = 0;
//                         stats[stat.processing_status] += stat.count;
//                     });
                    
//                     Object.keys(stats).forEach(status => {
//                         const icon = status === 'Processed' ? '‚úÖ' : 
//                                    status === 'Failed' ? '‚ùå' : 
//                                    status === 'Pending' ? '‚è≥' : '‚ö†Ô∏è';
//                         html += `<li>${icon} ${status}: ${stats[status]}</li>`;
//                     });
//                 } else {
//                     html += '<li>No buffer records found</li>';
//                 }
                
//                 html += `
//                                 </ul>
//                             </div>
//                         </div>
                        
//                         <h6>Recent Requests</h6>
//                         <table class="table table-sm">
//                             <thead><tr><th>File</th><th>Status</th><th>DocType</th><th>Date</th></tr></thead>
//                             <tbody>
//                 `;
                
//                 if (data.recent_requests && data.recent_requests.length > 0) {
//                     data.recent_requests.forEach(req => {
//                         const statusIcon = req.status === 'Completed' ? '‚úÖ' : 
//                                          req.status === 'Failed' ? '‚ùå' : 
//                                          req.status === 'Pending' ? '‚è≥' : '‚ö†Ô∏è';
//                         html += `
//                             <tr>
//                                 <td>${req.source_file}</td>
//                                 <td>${statusIcon} ${req.status}</td>
//                                 <td>${req.final_doctype || '-'}</td>
//                                 <td>${moment(req.created_at).format('DD/MM HH:mm')}</td>
//                             </tr>
//                         `;
//                     });
//                 } else {
//                     html += '<tr><td colspan="4">No recent requests</td></tr>';
//                 }
                
//                 html += `
//                             </tbody>
//                         </table>
//                     </div>
//                 `;
                
//                 frappe.msgprint({
//                     title: __('Migration Status'),
//                     message: html,
//                     wide: true
//                 });
//             } else {
//                 frappe.msgprint('Failed to fetch migration status');
//             }
//         }
//     });
// }

// function show_pending_requests(frm) {
//     frappe.call({
//         method: 'data_migration_tool.data_migration.api.get_pending_doctype_requests',
//         callback: function(r) {
//             if (r.message && r.message.status === 'success') {
//                 if (r.message.requests.length === 0) {
//                     frappe.msgprint('No pending DocType creation requests found');
//                     return;
//                 }
                
//                 // Use the dialog from migration_tool
//                 if (migration_tool && migration_tool.dialog) {
//                     migration_tool.dialog.show_pending_requests_list(r.message.requests);
//                 } else {
//                     frappe.msgprint('Dialog handler not available. Please refresh the page.');
//                 }
//             } else {
//                 frappe.msgprint('Failed to fetch pending requests');
//             }
//         }
//     });
// }

// function show_buffer_statistics(frm) {
//     frappe.call({
//         method: 'data_migration_tool.data_migration.api.get_buffer_statistics',  // Use whitelisted method
//         callback: function(r) {
//             if (r.message && r.message.status === 'success') {
//                 const data = r.message.data;
//                 let html = `
//                     <div class="buffer-statistics">
//                         <h5>Migration Buffer Statistics</h5>
//                         <p><strong>Total Records:</strong> ${data.total_records}</p>
                        
//                         <h6>By Status</h6>
//                         <ul>
//                 `;
                
//                 Object.keys(data.by_status || {}).forEach(status => {
//                     const icon = status === 'Processed' ? '‚úÖ' : 
//                                status === 'Failed' ? '‚ùå' : 
//                                status === 'Pending' ? '‚è≥' : '‚ö†Ô∏è';
//                     html += `<li>${icon} ${status}: ${data.by_status[status]}</li>`;
//                 });
                
//                 html += `
//                         </ul>
                        
//                         <h6>By DocType</h6>
//                         <table class="table table-sm">
//                             <thead><tr><th>DocType</th><th>Pending</th><th>Processed</th><th>Failed</th></tr></thead>
//                             <tbody>
//                 `;
                
//                 Object.keys(data.by_doctype || {}).forEach(doctype => {
//                     const stats = data.by_doctype[doctype];
//                     html += `
//                         <tr>
//                             <td>${doctype}</td>
//                             <td>${stats.Pending || 0}</td>
//                             <td>${stats.Processed || 0}</td>
//                             <td>${stats.Failed || 0}</td>
//                         </tr>
//                     `;
//                 });
                
//                 html += `
//                             </tbody>
//                         </table>
//                     </div>
//                 `;
                
//                 frappe.msgprint({
//                     title: __('Buffer Statistics'),
//                     message: html,
//                     wide: true
//                 });
//             } else {
//                 frappe.msgprint('Failed to fetch buffer statistics');
//             }
//         }
//     });
// }

// function check_job_status(job_name) {
//     frappe.call({
//         method: 'data_migration_tool.data_migration.api.get_job_status',  // Use our whitelisted method
//         args: { job_name: job_name },
//         callback: function(r) {
//             if (r.message && r.message.status === 'success') {
//                 const job_status = r.message.job_status;
//                 if (job_status === 'finished') {
//                     frappe.show_alert({
//                         message: 'Sync job completed successfully',
//                         indicator: 'green'
//                     });
//                 } else if (job_status === 'failed') {
//                     frappe.show_alert({
//                         message: 'Sync job failed',
//                         indicator: 'red'
//                     });
//                 } else if (job_status === 'started') {
//                     frappe.show_alert({
//                         message: 'Sync job still running...',
//                         indicator: 'blue'
//                     });
//                     // Check again in 5 seconds
//                     setTimeout(() => {
//                         check_job_status(job_name);
//                     }, 5000);
//                 }
//             }
//         }
//     });
// }
// function add_enhanced_migration_dashboard(frm) {
//     // Enhanced dashboard with real-time updates
//     const last_sync_formatted = frm.doc.last_sync_time ? 
//         moment(frm.doc.last_sync_time).format('DD/MM/YYYY HH:mm:ss') : 'Never';
    
//     const active_sources = [];
//     if (frm.doc.enable_zoho_sync) active_sources.push('Zoho');
//     if (frm.doc.enable_odoo_sync) active_sources.push('Odoo');
//     if (frm.doc.enable_csv_processing) active_sources.push('CSV');
    
//     let dashboard_html = `
//         <div class="migration-dashboard">
//             <div class="row">
//                 <div class="col-sm-4">
//                     <div class="card">
//                         <div class="card-body">
//                             <h6><i class="fa fa-clock-o"></i> Last Sync</h6>
//                             <p>${last_sync_formatted}</p>
//                         </div>
//                     </div>
//                 </div>
//                 <div class="col-sm-4">
//                     <div class="card">
//                         <div class="card-body">
//                             <h6><i class="fa fa-cogs"></i> Active Sources</h6>
//                             <p>${active_sources.length > 0 ? active_sources.join(', ') : 'None configured'}</p>
//                         </div>
//                     </div>
//                 </div>
//                 <div class="col-sm-4">
//                     <div class="card">
//                         <div class="card-body">
//                             <h6><i class="fa fa-refresh"></i> Sync Frequency</h6>
//                             <p>${frm.doc.sync_frequency || 'Not set'}</p>
//                         </div>
//                     </div>
//                 </div>
//             </div>
//         </div>
//     `;
    
//     $(frm.fields_dict['dashboard_html'].wrapper).html(dashboard_html);
// }

// function setup_realtime_updates(frm) {
//     // Listen for migration events and update the dashboard
//     frappe.realtime.on('migration_status_update', (data) => {
//         frappe.show_alert({
//             message: `Migration update: ${data.message}`,
//             indicator: data.indicator || 'blue'
//         });
        
//         // Refresh the form if needed
//         if (data.refresh_form) {
//             frm.reload_doc();
//         }
//     });
    
//     frappe.realtime.on('doctype_processing_completed', (data) => {
//         frappe.show_alert({
//             message: `Processing completed for ${data.filename}`,
//             indicator: 'green'
//         });
//     });
// }


// function handleCSVFileUploadWithAutoDetection(file) {
//     // Show progress
//     show_progress_dialog("Analyzing CSV and processing...");
    
//     frappe.call({
//         method: "data_migration_tool.data_migration.api.process_csv_intelligent",
//         args: {
//             file_path: file.file_path,
//             confidence_threshold: get_confidence_threshold() // Get from settings UI
//         },
//         callback: function(response) {
//             hide_progress_dialog();
            
//             if (response.message.status === 'success') {
//                 const result = response.message.data;
//                 const workflow = response.message.workflow;
                
//                 if (workflow === 'automated') {
//                     // Automated workflow completed
//                     frappe.show_alert({
//                         message: `Successfully processed ${result.csv_analysis.total_rows} records into DocType: ${result.target_doctype}`,
//                         indicator: 'green'
//                     });
                    
//                     // Show detailed results
//                     show_import_results_dialog(result);
                    
//                     // Redirect to the DocType list view
//                     frappe.set_route('List', result.target_doctype);
                    
//                 } else if (workflow === 'manual') {
//                     // Manual approval workflow
//                     frappe.show_alert({
//                         message: `DocType creation request submitted. Request ID: ${result.request_id}`,
//                         indicator: 'blue'
//                     });
                    
//                     // Show manual request dialog
//                     show_manual_request_dialog(result);
                    
//                     // Redirect to DocType Creation Request list
//                     frappe.set_route('List', 'DocType Creation Request', {status: 'Pending'});
//                 }
                
//             } else {
//                 // Show error
//                 frappe.msgprint({
//                     title: 'Processing Failed',
//                     message: response.message.message,
//                     indicator: 'red'
//                 });
//             }
//         },
//         error: function(err) {
//             hide_progress_dialog();
//             frappe.msgprint({
//                 title: 'System Error',
//                 message: 'An unexpected error occurred during processing.',
//                 indicator: 'red'
//             });
//         }
//     });
// }

// function get_confidence_threshold() {
//     // Get threshold from Migration Settings or use default
//     return parseFloat(cur_frm?.doc?.doctype_match_threshold || 80) / 100;
// }

// function show_import_results_dialog(result) {
//     const d = new frappe.ui.Dialog({
//         title: 'Import Results',
//         fields: [
//             {
//                 fieldtype: 'HTML',
//                 options: `
//                     <div class="import-results">
//                         <h4>${result.action_taken === 'matched_existing' ? 'üîÑ Updated Existing DocType' : 'üÜï Created New DocType'}</h4>
//                         <p><strong>DocType:</strong> ${result.target_doctype}</p>
//                         <p><strong>Confidence:</strong> ${(result.detection_details.confidence * 100).toFixed(1)}%</p>
                        
//                         <h5>üìä Processing Results:</h5>
//                         <ul>
//                             <li>‚úÖ Success: ${result.import_results.processing_results.success || 0}</li>
//                             <li>üîÑ Updated: ${result.import_results.processing_results.updated || 0}</li>
//                             <li>‚è≠Ô∏è Skipped: ${result.import_results.processing_results.skipped || 0}</li>
//                             <li>‚ùå Failed: ${result.import_results.processing_results.failed || 0}</li>
//                         </ul>
                        
//                         ${result.recommendations && result.recommendations.length > 0 ? 
//                             `<h5>üí° Recommendations:</h5><ul>${result.recommendations.map(r => `<li>${r}</li>`).join('')}</ul>` 
//                             : ''
//                         }
//                     </div>
//                 `
//             }
//         ],
//         primary_action_label: 'View Records',
//         primary_action: () => {
//             d.hide();
//             frappe.set_route('List', result.target_doctype);
//         }
//     });
//     d.show();
// }

// function show_manual_request_dialog(result) {
//     const d = new frappe.ui.Dialog({
//         title: 'Manual Approval Required',
//         fields: [
//             {
//                 fieldtype: 'HTML',
//                 options: `
//                     <div class="manual-request-info">
//                         <h4>üìù DocType Creation Request Submitted</h4>
//                         <p><strong>Request ID:</strong> ${result.request_id}</p>
//                         <p><strong>Suggested DocType:</strong> ${result.suggested_doctype}</p>
//                         <p><strong>File:</strong> ${result.csv_analysis.file_name}</p>
                        
//                         <h5>üìã CSV Analysis:</h5>
//                         <ul>
//                             <li><strong>Rows:</strong> ${result.csv_analysis.total_rows}</li>
//                             <li><strong>Columns:</strong> ${result.csv_analysis.total_columns}</li>
//                             <li><strong>Headers:</strong> ${result.csv_analysis.headers.join(', ')}</li>
//                         </ul>
                        
//                         <p class="text-muted">
//                             <i class="fa fa-info-circle"></i> 
//                             Your CSV file requires manual approval. The system administrator will review and approve the DocType creation.
//                         </p>
//                     </div>
//                 `
//             }
//         ],
//         primary_action_label: 'View Requests',
//         primary_action: () => {
//             d.hide();
//             frappe.set_route('List', 'DocType Creation Request', {status: 'Pending'});
//         }
//     });
//     d.show();
// }
